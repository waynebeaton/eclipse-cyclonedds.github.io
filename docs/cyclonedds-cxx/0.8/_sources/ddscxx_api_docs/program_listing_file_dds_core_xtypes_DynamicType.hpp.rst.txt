
.. _program_listing_file_dds_core_xtypes_DynamicType.hpp:

Program Listing for File DynamicType.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_core_xtypes_DynamicType.hpp>` (``dds/core/xtypes/DynamicType.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_DDS_CORE_XTYPES_T_DYNAMIC_TYPE_HPP_
   #define OMG_DDS_CORE_XTYPES_T_DYNAMIC_TYPE_HPP_
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Corp.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <string>
   #include <vector>
   #include <dds/core/conformance.hpp>
   #include <dds/core/Reference.hpp>
   #include <dds/core/xtypes/Annotations.hpp>
   
   #if defined (OMG_DDS_X_TYPES_DYNANIC_TYPE_SUPPORT)
   
   namespace dds
   {
   namespace core
   {
   namespace xtypes
   {
   
   class DynamicType;
   
   template <typename T>
   bool isPrimitiveType(const DynamicType<T>& t);
   
   template <typename T>
   bool isConstructedType(const DynamicType<T>& t);
   
   template <typename T>
   bool isCollectionType(const DynamicType<T>& t);
   
   template <typename T>
   bool isAggregationType(const DynamicType<T>& t);
   }
   }
   }
   
   
   class dds::core::xtypes::DynamicType : public dds::core::Reference
   {
   public:
       OMG_DDS_REF_TYPE(DynamicType, dds::core::Reference)
   
   protected:
       DynamicType(const std::string& name, TypeKind kind);
       DynamicType(const std::string& name, TypeKind kind, const Annotation& annotation);
       DynamicType(const std::string& name, TypeKind kind, const std::vector<Annotation>& annotations);
       template <typename FWI>
       DynamicType(const std::string& name, TypeKind kind, const FWI& annotation_begin, const FWI& annotation_end);
       DynamicType(const DyamicType& other);
       ~DynamicType();
   public:
       TypeKind kind() const;
   
       const std::string& name() const;
   
       const std::vector<Annotation>& annotations() const;
   
   public:
       bool operator == (const DynamicType& that) const;
   
   };
   
   
   #endif  // defined(OMG_DDS_EXTENSIBLE_AND_DYNAMIC_TOPIC_TYPE_SUPPORT)
   
   
   #endif // !defined(OMG_DDS_CORE_XTYPES_T_DYNAMIC_TYPE_HPP_)
