
.. _program_listing_file_dds_domain_detail_DomainParticipantImpl.hpp:

Program Listing for File DomainParticipantImpl.hpp
==================================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_domain_detail_DomainParticipantImpl.hpp>` (``dds/domain/detail/DomainParticipantImpl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   #ifndef CYCLONEDDS_DDS_DOMAIN_TDOMAINPARTICIPANT_IMPL_HPP_
   #define CYCLONEDDS_DDS_DOMAIN_TDOMAINPARTICIPANT_IMPL_HPP_
   
   /*
    * OMG PSM class declaration
    */
   #include <dds/domain/DomainParticipant.hpp>
   #include <org/eclipse/cyclonedds/domain/DomainParticipantDelegate.hpp>
   #include <org/eclipse/cyclonedds/domain/DomainParticipantRegistry.hpp>
   #include <org/eclipse/cyclonedds/core/ReportUtils.hpp>
   
   
   // Implementation
   
   namespace dds
   {
   namespace domain
   {
   
   
   DomainParticipant::DomainParticipant(uint32_t did):
       ::dds::core::Reference(
               new DELEGATE(did,
                            org::eclipse::cyclonedds::domain::DomainParticipantDelegate::default_participant_qos(),
                            NULL,
                            dds::core::status::StatusMask::none(),
                            std::string()))
   {
       this->delegate()->init(this->impl_);
       org::eclipse::cyclonedds::domain::DomainParticipantRegistry::insert(*this);
   }
   
   
   DomainParticipant::DomainParticipant(uint32_t id,
           const dds::domain::qos::DomainParticipantQos& qos,
           dds::domain::DomainParticipantListener* listener,
           const dds::core::status::StatusMask& mask,
           const std::string& config) :
       ::dds::core::Reference(new DELEGATE(id, qos, listener, mask, config))
   {
       this->delegate()->init(this->impl_);
       org::eclipse::cyclonedds::domain::DomainParticipantRegistry::insert(*this);
   }
   
   
   DomainParticipant::DomainParticipant(uint32_t id,
           const dds::domain::qos::DomainParticipantQos& qos,
           dds::domain::DomainParticipantListener* listener,
           const dds::core::status::StatusMask& mask,
           const ddsi_config& config) :
       ::dds::core::Reference(new DELEGATE(id, qos, listener, mask, config))
   {
       this->delegate()->init(this->impl_);
       org::eclipse::cyclonedds::domain::DomainParticipantRegistry::insert(*this);
   }
   
   
   void DomainParticipant::listener(Listener* listener,
           const ::dds::core::status::StatusMask& event_mask)
   {
       this->delegate()->listener(listener, event_mask);
   }
   
   
   typename DomainParticipant::Listener*  DomainParticipant::listener() const
   {
       return this->delegate()->listener();
   }
   
   
   const dds::domain::qos::DomainParticipantQos&
   DomainParticipant::qos() const
   {
       return this->delegate()->qos();
   }
   
   
   void DomainParticipant::qos(const dds::domain::qos::DomainParticipantQos& qos)
   {
       this->delegate()->qos(qos);
   }
   
   
   uint32_t DomainParticipant::domain_id() const
   {
       return this->delegate()->domain_id();
   }
   
   
   void DomainParticipant::assert_liveliness()
   {
       this->delegate()->assert_liveliness();
   }
   
   
   bool DomainParticipant::contains_entity(const ::dds::core::InstanceHandle& handle)
   {
       return this->delegate()->contains_entity(handle);
   }
   
   
   dds::core::Time DomainParticipant::current_time() const
   {
       return this->delegate()->current_time();
   }
   
   
   dds::domain::qos::DomainParticipantQos DomainParticipant::default_participant_qos()
   {
       return DELEGATE::default_participant_qos();
   }
   
   
   void DomainParticipant::default_participant_qos(const ::dds::domain::qos::DomainParticipantQos& qos)
   {
       DELEGATE::default_participant_qos(qos);
   }
   
   
   dds::pub::qos::PublisherQos  DomainParticipant::default_publisher_qos() const
   {
       return this->delegate()->default_publisher_qos();
   }
   
   
   DomainParticipant& DomainParticipant::default_publisher_qos(
       const ::dds::pub::qos::PublisherQos& qos)
   {
       this->delegate()->default_publisher_qos(qos);
       return *this;
   }
   
   
   dds::sub::qos::SubscriberQos  DomainParticipant::default_subscriber_qos() const
   {
       return this->delegate()->default_subscriber_qos();
   }
   
   
   DomainParticipant& DomainParticipant::default_subscriber_qos(
       const ::dds::sub::qos::SubscriberQos& qos)
   {
       this->delegate()->default_subscriber_qos(qos);
       return *this;
   }
   
   
   dds::topic::qos::TopicQos  DomainParticipant::default_topic_qos() const
   {
       return this->delegate()->default_topic_qos();
   }
   
   
   DomainParticipant&  DomainParticipant::default_topic_qos(const dds::topic::qos::TopicQos& qos)
   {
       this->delegate()->default_topic_qos(qos);
       return *this;
   }
   
   
   DomainParticipant& DomainParticipant::operator << (const dds::domain::qos::DomainParticipantQos& qos)
   {
       this->qos(qos);
       return *this;
   }
   
   
   const DomainParticipant& DomainParticipant::operator >> (dds::domain::qos::DomainParticipantQos& qos) const
   {
       qos = this->qos();
       return *this;
   }
   
   }
   }
   // End of implementation
   
   #endif /* CYCLONEDDS_DDS_DOMAIN_TDOMAINPARTICIPANT_IMPL_HPP_ */
