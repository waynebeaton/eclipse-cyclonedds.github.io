
.. _program_listing_file_dds_pub_AnyDataWriter.hpp:

Program Listing for File AnyDataWriter.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_pub_AnyDataWriter.hpp>` (``dds/pub/AnyDataWriter.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_TDDS_PUB_ANY_DATA_WRITER_HPP_
   #define OMG_TDDS_PUB_ANY_DATA_WRITER_HPP_
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Corp.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <dds/core/Entity.hpp>
   #include <dds/pub/Publisher.hpp>
   #include <dds/pub/qos/DataWriterQos.hpp>
   #include <dds/topic/TopicDescription.hpp>
   
   namespace dds
   {
   namespace pub
   {
   
   class AnyDataWriter;
   }
   }
   
   class dds::pub::AnyDataWriter : public dds::core::Entity
   {
   public:
       OMG_DDS_REF_TYPE_PROTECTED_DC(AnyDataWriter, dds::core::Entity)
       OMG_DDS_IMPLICIT_REF_BASE(AnyDataWriter)
       OMG_DDS_COMPLETE_RULE_OF_FIVE_VIRTUAL_DEFAULT(AnyDataWriter)
   
       //==========================================================================
       //== Entity Navigation
   
       
       const dds::pub::Publisher& publisher() const;
   
       const dds::topic::TopicDescription& topic_description() const;
   
   
   
       //==========================================================================
       //== QoS Management
   
       dds::pub::qos::DataWriterQos
       qos() const;
   
       void qos(const dds::pub::qos::DataWriterQos& qos);
   
       AnyDataWriter& operator << (const dds::pub::qos::DataWriterQos& qos);
   
       const AnyDataWriter& operator >> (dds::pub::qos::DataWriterQos& qos) const;
   
   
       //==========================================================================
       //== ACKs
   
       void wait_for_acknowledgments(const dds::core::Duration& timeout);
   
       //==========================================================================
       //== Status Management
   
       const dds::core::status::LivelinessLostStatus liveliness_lost_status();
   
       const dds::core::status::OfferedDeadlineMissedStatus offered_deadline_missed_status();
   
       const dds::core::status::OfferedIncompatibleQosStatus offered_incompatible_qos_status();
   
       const dds::core::status::PublicationMatchedStatus publication_matched_status();
   
   
       //==========================================================================
       //== Liveliness Management
   
       void assert_liveliness();
   
   };
   
   
   #endif /* OMG_TDDS_PUB_ANY_DATA_WRITER_HPP_ */
