
.. _program_listing_file_dds_sub_DataReaderListener.hpp:

Program Listing for File DataReaderListener.hpp
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_sub_DataReaderListener.hpp>` (``dds/sub/DataReaderListener.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_DDS_SUB_DATA_READER_LISTENER_HPP_
   #define OMG_DDS_SUB_DATA_READER_LISTENER_HPP_
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Corp.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <dds/core/status/Status.hpp>
   
   namespace dds
   {
   namespace sub
   {
   template <typename T>
   class DataReaderListener;
   
   template <typename T>
   class NoOpDataReaderListener;
   }
   }
   
   template <typename T>
   class dds::sub::DataReaderListener
   {
   public:
       typedef typename ::dds::core::smart_ptr_traits<DataReaderListener>::ref_type ref_type;
   public:
       virtual ~DataReaderListener() { }
   public:
       virtual void on_requested_deadline_missed(
           DataReader<T>& reader,
           const dds::core::status::RequestedDeadlineMissedStatus& status) = 0;
   
       virtual void on_requested_incompatible_qos(
           DataReader<T>& reader,
           const dds::core::status::RequestedIncompatibleQosStatus& status) = 0;
   
       virtual void on_sample_rejected(
           DataReader<T>& reader,
           const dds::core::status::SampleRejectedStatus& status) = 0;
   
       virtual void on_liveliness_changed(
           DataReader<T>& reader,
           const dds::core::status::LivelinessChangedStatus& status) = 0;
   
       virtual void on_data_available(DataReader<T>& reader) = 0;
   
       virtual void on_subscription_matched(
           DataReader<T>& reader,
           const dds::core::status::SubscriptionMatchedStatus& status) = 0;
   
       virtual void on_sample_lost(
           DataReader<T>& reader,
           const dds::core::status::SampleLostStatus& status) = 0;
   };
   
   
   template <typename T>
   class dds::sub::NoOpDataReaderListener : public virtual DataReaderListener<T>
   {
   public:
       typedef typename ::dds::core::smart_ptr_traits<NoOpDataReaderListener>::ref_type ref_type;
   
   public:
       virtual ~NoOpDataReaderListener() { }
   
   public:
       virtual void on_requested_deadline_missed(
           DataReader<T>&,
           const dds::core::status::RequestedDeadlineMissedStatus&) { }
   
       virtual void on_requested_incompatible_qos(
           DataReader<T>&,
           const dds::core::status::RequestedIncompatibleQosStatus&) { }
   
       virtual void on_sample_rejected(
           DataReader<T>&,
           const dds::core::status::SampleRejectedStatus&) { }
   
       virtual void on_liveliness_changed(
           DataReader<T>&,
           const dds::core::status::LivelinessChangedStatus&) { }
   
       virtual void on_data_available(
           DataReader<T>&) { }
   
       virtual void on_subscription_matched(
           DataReader<T>&,
           const dds::core::status::SubscriptionMatchedStatus&) { }
   
       virtual void on_sample_lost(
           DataReader<T>&,
           const dds::core::status::SampleLostStatus&) { }
   };
   
   #endif /* OMG_DDS_SUB_DATA_READER_LISTENER_HPP_ */
