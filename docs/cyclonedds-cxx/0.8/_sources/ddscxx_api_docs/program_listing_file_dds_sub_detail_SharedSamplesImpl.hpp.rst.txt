
.. _program_listing_file_dds_sub_detail_SharedSamplesImpl.hpp:

Program Listing for File SharedSamplesImpl.hpp
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_sub_detail_SharedSamplesImpl.hpp>` (``dds/sub/detail/SharedSamplesImpl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   #ifndef CYCLONEDDS_DDS_SUB_SHARED_SAMPLES_IMPL_HPP_
   #define CYCLONEDDS_DDS_SUB_SHARED_SAMPLES_IMPL_HPP_
   
   /*
    * OMG PSM class declaration
    */
   
   // Implementation
   
   namespace dds
   {
   namespace sub
   {
   
   template <typename T>
   SharedSamples<T>::SharedSamples() : delegate_(new DELEGATE<T>()) { }
   
   template <typename T>
   SharedSamples<T>::SharedSamples(dds::sub::LoanedSamples<T> ls) : delegate_(new DELEGATE<T>(ls)) { }
   
   template <typename T>
   SharedSamples<T>::~SharedSamples() {  }
   
   template <typename T>
   SharedSamples<T>::SharedSamples(const SharedSamples& other)
   {
       delegate_ = other.delegate_;
   }
   
   template <typename T>
   typename SharedSamples<T>::const_iterator SharedSamples<T>::begin() const
   {
       return delegate()->begin();
   }
   
   template <typename T>
   typename SharedSamples<T>::const_iterator SharedSamples<T>::end() const
   {
       return delegate()->end();
   }
   
   template <typename T>
   const typename SharedSamples<T>::DELEGATE_REF_T& SharedSamples<T>::delegate() const
   {
       return delegate_;
   }
   
   template <typename T>
   typename SharedSamples<T>::DELEGATE_REF_T& SharedSamples<T>::delegate()
   {
       return delegate_;
   }
   
   template <typename T>
   uint32_t SharedSamples<T>::length() const
   {
       return delegate_->length();
   }
   
   }
   }
   
   // End of implementation
   
   #endif /* CYCLONEDDS_DDS_SUB_SHARED_SAMPLES_IMPL_HPP_ */
