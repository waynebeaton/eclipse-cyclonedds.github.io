
.. _program_listing_file_dds_topic_Topic.hpp:

Program Listing for File Topic.hpp
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_topic_Topic.hpp>` (``dds/topic/Topic.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_DDS_TTOPIC_TOPIC_HPP_
   #define OMG_DDS_TTOPIC_TOPIC_HPP_
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Corp.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <dds/core/conformance.hpp>
   #include <dds/core/types.hpp>
   #include <dds/core/ref_traits.hpp>
   #include <dds/domain/DomainParticipant.hpp>
   #include <dds/topic/qos/TopicQos.hpp>
   #include <dds/topic/TopicDescription.hpp>
   #include <dds/topic/AnyTopic.hpp>
   
   
   namespace dds
   {
   namespace topic
   {
   template <typename T>
   class Topic;
   
   template <typename T>
   class TopicListener;
   }
   }
   
   
   template <typename T>
   class dds::topic::Topic : public dds::topic::AnyTopic
   {
   public:
       typedef T                               DataType;
   
       typedef TopicListener<T>                Listener;
   
   public:
       OMG_DDS_REF_TYPE_PROTECTED_DC_T(Topic, ::dds::topic::AnyTopic, T)
       OMG_DDS_IMPLICIT_REF_BASE(Topic)
       OMG_DDS_COMPLETE_RULE_OF_FIVE_VIRTUAL_DEFAULT(Topic)
   
   public:
   
       Topic(const dds::domain::DomainParticipant& dp,
             const std::string& topic_name);
   
       Topic(const dds::domain::DomainParticipant& dp,
             const std::string& topic_name,
             const std::string& type_name);
   
       Topic(const dds::domain::DomainParticipant& dp,
             const std::string& topic_name,
             const dds::topic::qos::TopicQos& qos,
             dds::topic::TopicListener<T>* listener = NULL,
             const dds::core::status::StatusMask& mask = dds::core::status::StatusMask::none());
   
       Topic(const dds::domain::DomainParticipant& dp,
             const std::string& topic_name,
             const std::string& type_name,
             const dds::topic::qos::TopicQos& qos,
             dds::topic::TopicListener<T>* listener = NULL,
             const dds::core::status::StatusMask& mask = dds::core::status::StatusMask::none());
   
       #if defined (OMG_DDS_X_TYPE_DYNAMIC_TYPES_SUPPORT)
   
       Topic(const dds::domain::DomainParticipant& dp,
             const std::string& topic_name,
             const dds::core::xtypes::DynamicType type);
   
       Topic(const dds::domain::DomainParticipant& dp,
             const std::string& topic_name,
             const dds::core::xtypes::DynamicType type
             const dds::topic::qos::TopicQos& qos,
             dds::topic::TopicListener<T>* listener = NULL,
             const dds::core::status::StatusMask& mask = dds::core::status::StatusMask::none());
   
       #endif /* OMG_DDS_X_TYPE_DYNAMIC_TYPES_SUPPORT */
   
   public:
       void listener(Listener* listener,
                     const ::dds::core::status::StatusMask& event_mask);
   
       Listener* listener() const;
   
   };
   
   
   #endif /* OMG_DDS_TTOPIC_TOPIC_HPP_ */
