
.. _program_listing_file_dds_topic_detail_AnyTopicImpl.hpp:

Program Listing for File AnyTopicImpl.hpp
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_topic_detail_AnyTopicImpl.hpp>` (``dds/topic/detail/AnyTopicImpl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   #ifndef CYCLONEDDS_DDS_TOPIC_TANYTOPIC_IMPL_HPP_
   #define CYCLONEDDS_DDS_TOPIC_TANYTOPIC_IMPL_HPP_
   
   /*
    * OMG PSM class declaration
    */
   #include <dds/topic/AnyTopic.hpp>
   
   // Implementation
   namespace dds
   {
   namespace topic
   {
   
   
   dds::topic::qos::TopicQos
   AnyTopic::qos() const
   {
       return this->delegate()->qos();
   }
   
   
   void
   AnyTopic::qos(const dds::topic::qos::TopicQos& qos)
   {
       this->delegate()->qos(qos);
   }
   
   
   AnyTopic&
   AnyTopic::operator << (const dds::topic::qos::TopicQos& qos)
   {
       this->delegate()->qos(qos);
       return *this;
   }
   
   
   const AnyTopic&
   AnyTopic::operator >> (dds::topic::qos::TopicQos& qos) const
   {
       qos = this->delegate()->qos();
       return *this;
   }
   
   
   dds::core::status::InconsistentTopicStatus
   AnyTopic::inconsistent_topic_status() const
   {
       return this->delegate()->inconsistent_topic_status();
   }
   
   
   }
   }
   
   // End of implementation
   
   #endif /* CYCLONEDDS_DDS_TOPIC_TANYTOPIC_IMPL_HPP_ */
