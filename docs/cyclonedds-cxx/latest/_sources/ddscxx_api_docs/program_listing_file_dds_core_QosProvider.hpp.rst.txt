
.. _program_listing_file_dds_core_QosProvider.hpp:

Program Listing for File QosProvider.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_core_QosProvider.hpp>` (``dds/core/QosProvider.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_DDS_CORE_QOS_TPROVIDER_HPP_
   #define OMG_DDS_CORE_QOS_TPROVIDER_HPP_
   
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Inc.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <dds/core/Reference.hpp>
   
   #include <dds/domain/qos/DomainParticipantQos.hpp>
   
   #include <dds/topic/qos/TopicQos.hpp>
   
   #include <dds/sub/qos/SubscriberQos.hpp>
   #include <dds/sub/qos/DataReaderQos.hpp>
   
   #include <dds/pub/qos/PublisherQos.hpp>
   #include <dds/pub/qos/DataWriterQos.hpp>
   
   namespace dds
   {
   namespace core
   {
   
   class QosProvider;
   }
   }
   
   class dds::core::QosProvider : public dds::core::Reference
   {
   public:
       explicit QosProvider(const std::string& uri, const std::string& profile);
   
       explicit QosProvider(const std::string& uri);
   
       dds::domain::qos::DomainParticipantQos participant_qos();
   
       dds::domain::qos::DomainParticipantQos participant_qos(const std::string& id);
   
       dds::topic::qos::TopicQos topic_qos();
   
       dds::topic::qos::TopicQos topic_qos(const std::string& id);
   
       dds::sub::qos::SubscriberQos subscriber_qos();
   
       dds::sub::qos::SubscriberQos subscriber_qos(const std::string& id);
   
       dds::sub::qos::DataReaderQos datareader_qos();
   
       dds::sub::qos::DataReaderQos datareader_qos(const std::string& id);
   
       dds::pub::qos::PublisherQos publisher_qos();
   
       dds::pub::qos::PublisherQos publisher_qos(const std::string& id);
   
       dds::pub::qos::DataWriterQos datawriter_qos();
   
       dds::pub::qos::DataWriterQos datawriter_qos(const std::string& id);
   };
   
   #endif /* OMG_DDS_CORE_QOS_TPROVIDER_HPP_ */
