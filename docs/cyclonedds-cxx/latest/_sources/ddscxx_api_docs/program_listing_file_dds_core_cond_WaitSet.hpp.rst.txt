
.. _program_listing_file_dds_core_cond_WaitSet.hpp:

Program Listing for File WaitSet.hpp
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_core_cond_WaitSet.hpp>` (``dds/core/cond/WaitSet.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_TDDS_CORE_WAIT_SET_HPP_
   #define OMG_TDDS_CORE_WAIT_SET_HPP_
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Corp.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <vector>
   
   #include <dds/core/types.hpp>
   #include <dds/core/Duration.hpp>
   #include <dds/core/cond/Condition.hpp>
   
   namespace dds
   {
   namespace core
   {
   namespace cond
   {
   
   class WaitSet;
   }
   }
   }
   
   
   class dds::core::cond::WaitSet : public dds::core::Reference
   {
   public:
       typedef std::vector<dds::core::cond::Condition> ConditionSeq;
   
   public:
       OMG_DDS_REF_TYPE_NO_DC(WaitSet, dds::core::Reference)
       OMG_DDS_IMPLICIT_REF_BASE(WaitSet)
   
   public:
       WaitSet();
   
   public:
       const ConditionSeq wait(const dds::core::Duration& timeout);
   
       const ConditionSeq wait();
   
       ConditionSeq& wait(ConditionSeq& triggered,
                          const dds::core::Duration& timeout);
   
       ConditionSeq& wait(ConditionSeq& triggered);
   
   public:
       void dispatch();
   
       void dispatch(const dds::core::Duration& timeout);
   
   public:
       WaitSet& operator +=(const dds::core::cond::Condition& cond);
   
       WaitSet& operator -=(const dds::core::cond::Condition& cond);
   
       WaitSet& attach_condition(const dds::core::cond::Condition& cond);
   
       bool detach_condition(const dds::core::cond::Condition& cond);
   
       const ConditionSeq conditions() const;
   
       ConditionSeq& conditions(ConditionSeq& conds) const;
   };
   
   #endif /* OMG_TDDS_CORE_WAIT_SET_HPP_ */
