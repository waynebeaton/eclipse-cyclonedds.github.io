
.. _program_listing_file_dds_core_cond_detail_StatusConditionImpl.hpp:

Program Listing for File StatusConditionImpl.hpp
================================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_core_cond_detail_StatusConditionImpl.hpp>` (``dds/core/cond/detail/StatusConditionImpl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   #ifndef CYCLONEDDS_DDS_CORE_COND_TSTATUSCONDITION_IMPL_HPP_
   #define CYCLONEDDS_DDS_CORE_COND_TSTATUSCONDITION_IMPL_HPP_
   
   /*
    * OMG PSM class declaration
    */
   #include <dds/core/cond/StatusCondition.hpp>
   #include <org/eclipse/cyclonedds/core/cond/StatusConditionDelegate.hpp>
   #include <org/eclipse/cyclonedds/core/ReportUtils.hpp>
   
   // Implementation
   namespace dds
   {
   namespace core
   {
   namespace cond
   {
   
   
   StatusCondition::StatusCondition(const dds::core::Entity& e)
   {
       dds::core::Reference::impl_=
               ::std::dynamic_pointer_cast<org::eclipse::cyclonedds::core::cond::StatusConditionDelegate>(
                           e.delegate()->get_statusCondition());
   }
   
   
   template <typename FUN>
   StatusCondition::StatusCondition(const dds::core::Entity& e, FUN functor)
   {
       dds::core::Reference::impl_=
               ::std::dynamic_pointer_cast<org::eclipse::cyclonedds::core::cond::StatusConditionDelegate>(
                             e.delegate()->get_statusCondition());
       this->delegate()->set_handler(functor);
   }
   
   
   void StatusCondition::enabled_statuses(const dds::core::status::StatusMask& status) const
   {
       this->delegate()->enabled_statuses(status);
   }
   
   
   const dds::core::status::StatusMask StatusCondition::enabled_statuses() const
   {
       return this->delegate()->enabled_statuses();
   }
   
   
   const dds::core::Entity& StatusCondition::entity() const
   {
       return this->delegate()->entity();
   }
   
   
   
   Condition::Condition(const dds::core::cond::StatusCondition<org::eclipse::cyclonedds::core::cond::StatusConditionDelegate>& h)
   {
       if (h.is_nil()) {
           /* We got a null object and are not really able to do a typecheck here. */
           /* So, just set a null object. */
           *this = dds::core::null;
       } else {
           this->::dds::core::Reference::impl_ = ::std::dynamic_pointer_cast<DELEGATE_T>(h.delegate());
           if (h.delegate() != this->::dds::core::Reference::impl_) {
               throw dds::core::IllegalOperationError(std::string("Attempted invalid cast: ") + typeid(h).name() + " to " + typeid(*this).name());
           }
       }
   }
   
   
   Condition&
   Condition::operator=(const dds::core::cond::StatusCondition<org::eclipse::cyclonedds::core::cond::StatusConditionDelegate>& rhs)
   {
       const Condition &t = rhs;
       if (this != &t) {
           if (rhs.is_nil()) {
               /* We got a null object and are not really able to do a typecheck here. */
               /* So, just set a null object. */
               *this = dds::core::null;
           } else {
               Condition other(rhs);
               /* Dont have to copy when the delegate is the same. */
               if (other.delegate() != this->::dds::core::Reference::impl_) {
                   *this = other;
               }
           }
       }
       return *this;
   }
   
   
   }
   }
   }
   // End of implementation
   
   #endif /* CYCLONEDDS_DDS_CORE_COND_TSTATUSCONDITION_IMPL_HPP_ */
