
.. _program_listing_file_dds_core_policy_QosPolicyCount.hpp:

Program Listing for File QosPolicyCount.hpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_core_policy_QosPolicyCount.hpp>` (``dds/core/policy/QosPolicyCount.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_TDDS_CORE_POLICY_QOS_POLICY_COUNT_HPP_
   #define OMG_TDDS_CORE_POLICY_QOS_POLICY_COUNT_HPP_
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Corp.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <dds/core/Value.hpp>
   
   namespace dds
   {
   namespace core
   {
   namespace policy
   {
   
   #if defined(__GNUC__) && (__GNUC__ >= 10)
   _Pragma("GCC diagnostic push")
   _Pragma("GCC diagnostic ignored \"-Wanalyzer-null-dereference\"")
   #endif
   
   class QosPolicyCount : public dds::core::Value
   {
   public:
       QosPolicyCount(QosPolicyId policy_id, int32_t count);
   
       QosPolicyCount(const QosPolicyCount& other);
   
       QosPolicyCount& operator=(const QosPolicyCount& other) = default;
   
   public:
       QosPolicyId policy_id() const;
   
       int32_t count() const;
   };
   
   }
   }
   }
   
   #if defined(__GNUC__) && (__GNUC__ >= 10)
   _Pragma("GCC diagnostic pop")
   #endif
   
   #endif // !defined(OMG_TDDS_CORE_POLICY_QOS_POLICY_COUNT_HPP_)
