
.. _program_listing_file_dds_sub_LoanedSamples.hpp:

Program Listing for File LoanedSamples.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_sub_LoanedSamples.hpp>` (``dds/sub/LoanedSamples.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /* Copyright 2010, Object Management Group, Inc.
   * Copyright 2010, PrismTech, Corp.
   * Copyright 2010, Real-Time Innovations, Inc.
   * All rights reserved.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
   #ifndef OMG_DDS_SUB_TLOANED_SAMPLES_HPP_
   #define OMG_DDS_SUB_TLOANED_SAMPLES_HPP_
   
   #include <dds/core/ref_traits.hpp>
   #include <dds/sub/SampleRef.hpp>
   
   #include <dds/sub/detail/LoanedSamples.hpp>
   
   namespace dds
   {
   namespace sub
   {
   template <typename T,
             template <typename Q> class DELEGATE = dds::sub::detail::LoanedSamples>
   class LoanedSamples;
   
   // Used by C++11 compilers to allow for using LoanedSamples
   // and SharedSamples in a range-based for-loop.
   template <typename T> typename T::const_iterator cbegin(const T& t);
   template <typename T> typename T::const_iterator cend(const T& t);
   }
   
   }
   template <typename T>
   class dds::sub::LoanedSamples
   {
   public:
       typedef T DataType;
   
       typedef typename DELEGATE<T>::const_iterator const_iterator;
   
       typedef typename dds::core::smart_ptr_traits::ref_type DELEGATE_REF_T;
   public:
       LoanedSamples();
   
       ~LoanedSamples();
   
       LoanedSamples(const LoanedSamples& other);
   
       LoanedSamples(LoanedSamples&& other);
   
       LoanedSamples& operator=(const LoanedSamples& other) = default;
   
       LoanedSamples& operator=(LoanedSamples&& other) = default;
   
   
   public:
       const_iterator begin() const;
   
       const_iterator end() const;
   
       const DELEGATE_REF_T& delegate() const;
   
       DELEGATE_REF_T& delegate();
       uint32_t length() const;
   
   private:
       DELEGATE_REF_T delegate_;
   };
   
   namespace dds
   {
   namespace sub
   {
   template <typename T, template <typename Q> class D>
   LoanedSamples<T, D >
   move(LoanedSamples<T, D >& a);
   }
   }
   
   #include <dds/sub/detail/LoanedSamplesImpl.hpp>
   
   #endif /* OMG_DDS_SUB_TLOANED_SAMPLES_HPP_ */
