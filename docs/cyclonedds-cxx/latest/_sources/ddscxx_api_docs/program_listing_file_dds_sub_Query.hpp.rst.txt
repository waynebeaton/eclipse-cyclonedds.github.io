
.. _program_listing_file_dds_sub_Query.hpp:

Program Listing for File Query.hpp
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_sub_Query.hpp>` (``dds/sub/Query.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef DDS_CORE_TQUERY_HPP_
   #define DDS_CORE_TQUERY_HPP_
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Corp.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <dds/core/types.hpp>
   #include <dds/core/Reference.hpp>
   #include <dds/sub/AnyDataReader.hpp>
   
   namespace dds
   {
   namespace sub
   {
   
   class Query;
   }
   }
   
   class dds::sub::Query: public virtual dds::core::Reference {
   public:
       OMG_DDS_REF_TYPE_PROTECTED_DC(Query, dds::core::Reference)
       OMG_DDS_IMPLICIT_REF_BASE(Query)
       OMG_DDS_COMPLETE_RULE_OF_FIVE_VIRTUAL_EXPLICIT(Query)
   
   public:
     typedef typename DELEGATE::iterator iterator;
   
     typedef typename DELEGATE::const_iterator const_iterator;
   
   public:
     Query(const dds::sub::AnyDataReader& dr, const std::string& expression);
   
     template<typename FWIterator>
     Query(const dds::sub::AnyDataReader& dr, const std::string& expression,
            const FWIterator& params_begin, const FWIterator& params_end);
   
     Query(const dds::sub::AnyDataReader& dr, const std::string& expression,
            const std::vector<std::string>& params);
   
     const std::string& expression() const;
   
     void expression(const std::string& expr);
   
     const_iterator begin() const;
   
     const_iterator end() const;
   
     iterator begin();
   
     iterator end();
   
     template<typename FWIterator>
     void parameters(const FWIterator& begin, const FWIterator end);
   
     void add_parameter(const std::string& param);
   
     uint32_t parameters_length() const;
   
     const AnyDataReader& data_reader() const;
   };
   
   #endif /* DDS_CORE_TQUERY_HPP_ */
