
.. _program_listing_file_dds_sub_Subscriber.hpp:

Program Listing for File Subscriber.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_sub_Subscriber.hpp>` (``dds/sub/Subscriber.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_TDDS_SUB_SUBSCRIBER_HPP_
   #define OMG_TDDS_SUB_SUBSCRIBER_HPP_
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Corp.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <dds/core/Entity.hpp>
   #include <dds/domain/DomainParticipant.hpp>
   #include <dds/sub/qos/DataReaderQos.hpp>
   
   namespace dds
   {
   namespace sub
   {
   
   class Subscriber;
   
   class SubscriberListener;
   }
   }
   
   class dds::sub::Subscriber : public dds::core::Entity
   {
   public:
       OMG_DDS_REF_TYPE_PROTECTED_DC(Subscriber, dds::core::Entity)
       OMG_DDS_IMPLICIT_REF_BASE(Subscriber)
   
   public:
       typedef dds::sub::SubscriberListener                 Listener;
   
   public:
       Subscriber(const ::dds::domain::DomainParticipant& dp);
   
       Subscriber(const ::dds::domain::DomainParticipant& dp,
                   const dds::sub::qos::SubscriberQos& qos,
                   dds::sub::SubscriberListener* listener = NULL,
                   const dds::core::status::StatusMask& mask = dds::core::status::StatusMask::none());
   
   public:
       void notify_datareaders();
   
       void listener(Listener* listener,
                     const dds::core::status::StatusMask& event_mask);
   
       Listener* listener() const;
   
       const dds::sub::qos::SubscriberQos& qos() const;
   
       void qos(const dds::sub::qos::SubscriberQos& sqos);
   
       dds::sub::qos::DataReaderQos default_datareader_qos() const;
   
       Subscriber& default_datareader_qos(const dds::sub::qos::DataReaderQos& qos);
   
       const dds::domain::DomainParticipant& participant() const;
   
       Subscriber& operator << (const dds::sub::qos::SubscriberQos& qos);
   
       const Subscriber& operator >> (dds::sub::qos::SubscriberQos& qos) const;
   };
   
   
   #endif /* OMG_TDDS_SUB_SUBSCRIBER_HPP_ */
