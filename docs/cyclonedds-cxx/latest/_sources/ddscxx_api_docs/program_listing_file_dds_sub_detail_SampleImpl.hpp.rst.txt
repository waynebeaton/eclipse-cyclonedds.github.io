
.. _program_listing_file_dds_sub_detail_SampleImpl.hpp:

Program Listing for File SampleImpl.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_sub_detail_SampleImpl.hpp>` (``dds/sub/detail/SampleImpl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   #ifndef CYCLONEDDS_DDS_SUB_TSAMPLE_HPP_
   #define CYCLONEDDS_DDS_SUB_TSAMPLE_HPP_
   
   /*
    * OMG PSM class declaration
    */
   #include <dds/sub/Sample.hpp>
   
   // Implementation
   namespace dds
   {
   namespace sub
   {
   
   template <typename T>
   Sample<T>::Sample() : dds::core::Value() {}
   
   template <typename T>
   Sample<T>::Sample(const T& data, const SampleInfo& info) : dds::core::Value(data, info) { }
   
   template <typename T>
   Sample<T>::Sample(const Sample& other) : dds::core::Value(other.delegate()) { }
   
   template <typename T>
   const typename Sample<T>::DataType& Sample<T>::data() const
   {
       return this->delegate().data();
   }
   
   template <typename T>
   void Sample<T>::data(const DataType& d)
   {
       this->delegate().data(d);
   }
   
   template <typename T>
   const SampleInfo& Sample<T>::info() const
   {
       return this->delegate().info();
   }
   
   template <typename T>
   void Sample<T>::info(const SampleInfo& i)
   {
       this->delegate().info(i);
   }
   
   }
   }
   // End of implementation
   #endif /* CYCLONEDDS_DDS_SUB_TSAMPLE_HPP_ */
