
.. _program_listing_file_dds_sub_detail_SampleRefImpl.hpp:

Program Listing for File SampleRefImpl.hpp
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_sub_detail_SampleRefImpl.hpp>` (``dds/sub/detail/SampleRefImpl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   #ifndef CYCLONEDDS_DDS_SUB_TSAMPLEREF_HPP_
   #define CYCLONEDDS_DDS_SUB_TSAMPLEREF_HPP_
   
   /*
    * OMG PSM class declaration
    */
   #include <dds/sub/SampleRef.hpp>
   
   // Implementation
   namespace dds
   {
   namespace sub
   {
   
   template <typename T>
   SampleRef<T>::SampleRef() : dds::core::Value() {}
   
   template <typename T>
   SampleRef<T>::SampleRef(const T& data, const SampleInfo& info) : dds::core::Value(data, info) { }
   
   template <typename T>
   SampleRef<T>::SampleRef(const SampleRef& other) : dds::core::Value(other.delegate()) { }
   
   template <typename T>
   const typename SampleRef<T>::DataType& SampleRef<T>::data() const
   {
       return this->delegate().data();
   }
   
   template <typename T>
   const SampleInfo& SampleRef<T>::info() const
   {
       return this->delegate().info();
   }
   
   }
   }
   // End of implementation
   #endif /* CYCLONEDDS_DDS_SUB_TSAMPLEREF_HPP_ */
