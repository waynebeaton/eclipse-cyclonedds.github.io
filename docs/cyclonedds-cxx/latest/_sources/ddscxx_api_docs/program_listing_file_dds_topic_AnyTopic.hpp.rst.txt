
.. _program_listing_file_dds_topic_AnyTopic.hpp:

Program Listing for File AnyTopic.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_topic_AnyTopic.hpp>` (``dds/topic/AnyTopic.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_DDS_TOPIC_TANYTOPIC_HPP_
   #define OMG_DDS_TOPIC_TANYTOPIC_HPP_
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Corp.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <dds/core/conformance.hpp>
   #include <dds/core/types.hpp>
   #include <dds/core/ref_traits.hpp>
   #include <dds/domain/DomainParticipant.hpp>
   #include <dds/topic/qos/TopicQos.hpp>
   #include <dds/topic/TopicDescription.hpp>
   
   
   namespace dds
   {
   namespace topic
   {
   
   class AnyTopic;
   }
   }
   
   
   class dds::topic::AnyTopic :
       public ::dds::core::Entity,
       public ::dds::topic::TopicDescription
   {
       OMG_DDS_REF_TYPE_PROTECTED_DC(AnyTopic, ::dds::topic::TopicDescription)
       OMG_DDS_IMPLICIT_REF_BASE(AnyTopic)
   
       OMG_DDS_COMPLETE_RULE_OF_FIVE_VIRTUAL_DEFAULT(AnyTopic)
   
   public:
   
       //==========================================================================
       //== QoS Management
   
       dds::topic::qos::TopicQos qos() const;
   
       void qos(const dds::topic::qos::TopicQos& qos);
   
       AnyTopic& operator << (const dds::topic::qos::TopicQos& qos);
   
       const AnyTopic& operator >> (dds::topic::qos::TopicQos& qos) const;
   
       ::dds::core::status::InconsistentTopicStatus
       inconsistent_topic_status() const;
   
   };
   
   
   #endif /* OMG_DDS_TOPIC_TANYTOPIC_HPP_ */
