
.. _program_listing_file_dds_topic_ContentFilteredTopic.hpp:

Program Listing for File ContentFilteredTopic.hpp
=================================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_topic_ContentFilteredTopic.hpp>` (``dds/topic/ContentFilteredTopic.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef OMG_DDS_T_TOPIC_CONTENT_FILTERED_TOPIC_HPP_
   #define OMG_DDS_T_TOPIC_CONTENT_FILTERED_TOPIC_HPP_
   
   /* Copyright 2010, Object Management Group, Inc.
    * Copyright 2010, PrismTech, Inc.
    * Copyright 2010, Real-Time Innovations, Inc.
    * All rights reserved.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *     http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */
   
   #include <vector>
   
   #include <dds/core/detail/conformance.hpp>
   #include <dds/core/types.hpp>
   #include <dds/topic/Topic.hpp>
   #include <dds/topic/Filter.hpp>
   
   #ifdef OMG_DDS_CONTENT_SUBSCRIPTION_SUPPORT
   
   namespace dds
   {
   namespace topic
   {
   template <typename T>
   class ContentFilteredTopic;
   }
   }
   
   
   template <typename T>
   class dds::topic::ContentFilteredTopic : public dds::topic::TopicDescription
   {
   public:
       OMG_DDS_REF_TYPE_PROTECTED_DC_T(ContentFilteredTopic, dds::topic::TopicDescription, T)
       OMG_DDS_IMPLICIT_REF_BASE(ContentFilteredTopic)
   
       
       typedef T                               DataType;
   
   public:
       ContentFilteredTopic(const Topic<T>& topic, const std::string& name, const dds::topic::Filter& filter);
   
       virtual ~ContentFilteredTopic();
   public:
       const std::string& filter_expression() const;
   
       const dds::core::StringSeq filter_parameters() const;
   
       template <typename FWDIterator>
       void filter_parameters(const FWDIterator& begin, const FWDIterator& end);
   
       const dds::topic::Topic<T>& topic() const;
   };
   
   #endif  // OMG_DDS_CONTENT_SUBSCRIPTION_SUPPORT
   
   
   #endif /* OMG_DDS_T_TOPIC_CONTENT_FILTERED_TOPIC_HPP_ */
