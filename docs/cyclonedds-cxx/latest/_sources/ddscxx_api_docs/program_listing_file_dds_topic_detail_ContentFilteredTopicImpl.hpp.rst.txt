
.. _program_listing_file_dds_topic_detail_ContentFilteredTopicImpl.hpp:

Program Listing for File ContentFilteredTopicImpl.hpp
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_topic_detail_ContentFilteredTopicImpl.hpp>` (``dds/topic/detail/ContentFilteredTopicImpl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   #ifndef CYCLONEDDS_DDS_TOPIC_TCONTENTFILTEREDTOPIC_HPP_
   #define CYCLONEDDS_DDS_TOPIC_TCONTENTFILTEREDTOPIC_HPP_
   
   /*
    * OMG PSM class declaration
    */
   #include <dds/topic/TContentFilteredTopic.hpp>
   
   // Implementation
   
   namespace dds
   {
   namespace topic
   {
   template <typename T>
   ContentFilteredTopic<T>::ContentFilteredTopic(const Topic<T>& topic,
                                                           const std::string& name,
                                                           const dds::topic::Filter& filter) :
           ::dds::core::Reference(
                   new dds::topic::detail::ContentFilteredTopic<T>(topic, name, filter))
   {
       this->delegate()->init(::dds::core::Reference::impl_);
   }
   
   template <typename T>
   ContentFilteredTopic<T>::~ContentFilteredTopic()
   {
       // Nothing to be done yet....
   }
   
   template <typename T>
   const std::string& ContentFilteredTopic<T>::filter_expression() const
   {
       return this->delegate()->filter_expression();
   }
   
   template <typename T>
   const dds::core::StringSeq ContentFilteredTopic<T>::filter_parameters() const
   {
       return this->delegate()->filter_parameters();
   }
   
   template <typename T>
   template <typename FWDIterator>
   void ContentFilteredTopic<T>::filter_parameters(const FWDIterator& begin, const FWDIterator& end)
   {
       this->delegate()->filter_parameters(begin, end);
   }
   
   template <typename T>
   const dds::topic::Topic<T>& ContentFilteredTopic<T>::topic() const
   {
       return this->delegate()->topic();
   }
   
   
   }
   }
   
   // End of implementation
   
   #endif /* CYCLONEDDS_DDS_TOPIC_TCONTENTFILTEREDTOPIC_HPP_ */
