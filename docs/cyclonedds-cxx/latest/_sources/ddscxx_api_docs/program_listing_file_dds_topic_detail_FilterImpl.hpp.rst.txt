
.. _program_listing_file_dds_topic_detail_FilterImpl.hpp:

Program Listing for File FilterImpl.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_dds_topic_detail_FilterImpl.hpp>` (``dds/topic/detail/FilterImpl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   #ifndef CYCLONEDDS_DDS_TOPIC_TFILTER_HPP_
   #define CYCLONEDDS_DDS_TOPIC_TFILTER_HPP_
   
   /*
    * OMG PSM class declaration
    */
   #include <dds/topic/Filter.hpp>
   
   // Implementation
   
   namespace dds
   {
   namespace topic
   {
   
   template<typename D>
   Filter::Filter(const std::string& query_expression) :
       dds::core::Value(query_expression)
   {
   }
   
   template<typename D>
   template<typename FWIterator>
   Filter::Filter(const std::string& query_expression, const FWIterator& params_begin,
                       const FWIterator& params_end)
       : dds::core::Value(query_expression, params_begin, params_end)
   { }
   
   template<typename D>
   Filter::Filter(const std::string& query_expression,
                       const std::vector<std::string>& params) :
       dds::core::Value(query_expression, params.begin(), params.end())
   {
   }
   
   template<typename D>
   const std::string& Filter::expression() const
   {
       return this->delegate().expression();
   }
   
   template<typename D>
   typename Filter::const_iterator Filter::begin() const
   {
       return this->delegate().begin();
   }
   
   template<typename D>
   typename Filter::const_iterator Filter::end() const
   {
       return this->delegate().end();
   }
   
   template<typename D>
   typename Filter::iterator Filter::begin()
   {
       return this->delegate().begin();
   }
   
   template<typename D>
   typename Filter::iterator Filter::end()
   {
       return this->delegate().end();
   }
   
   template<typename D>
   template<typename FWIterator>
   void Filter::parameters(const FWIterator& begin, const FWIterator end)
   {
       this->delegate().parameters(begin, end);
   }
   
   template<typename D>
   void Filter::add_parameter(const std::string& param)
   {
       this->delegate().add_parameter(param);
   }
   
   template<typename D>
   uint32_t Filter::parameters_length() const
   {
       return this->delegate().parameters_length();
   }
   
   }
   }
   
   // End of implementation
   
   #endif /* CYCLONEDDS_DDS_TOPIC_TFILTER_HPP_ */
