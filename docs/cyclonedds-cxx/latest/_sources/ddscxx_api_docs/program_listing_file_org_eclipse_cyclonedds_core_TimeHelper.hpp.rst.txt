
.. _program_listing_file_org_eclipse_cyclonedds_core_TimeHelper.hpp:

Program Listing for File TimeHelper.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_org_eclipse_cyclonedds_core_TimeHelper.hpp>` (``org/eclipse/cyclonedds/core/TimeHelper.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright(c) 2006 to 2020 ADLINK Technology Limited and others
    *
    * This program and the accompanying materials are made available under the
    * terms of the Eclipse Public License v. 2.0 which is available at
    * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
    * v. 1.0 which is available at
    * http://www.eclipse.org/org/documents/edl-v10.php.
    *
    * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
    */
   
   
   #ifndef CYCLONEDDS_CORE_TIME_HELPER_HPP_
   #define CYCLONEDDS_CORE_TIME_HELPER_HPP_
   
   #include <sstream>
   #include <dds/dds.h>
   #include <org/eclipse/cyclonedds/core/ReportUtils.hpp>
   
   #define MS 1000
   #define MiS 1000000
   #define NS 1000000000
   
   namespace org
   {
   namespace eclipse
   {
   namespace cyclonedds
   {
   namespace core
   {
   namespace timehelper
   {
   
   
   template <typename TIMEISH>
   bool is_valid_for_arithmetic(const TIMEISH& t)
   {
       return (t.sec() != -1 // Invalid
               && t.sec() != 0x7FFFFFFF // Infinity
               && t.nanosec() < 1000000000);  // Invalid & infinity are > 10^9
   }
   
   template <typename TIMEISH>
   void validate(const TIMEISH& t, const char* context = "timehelper", const char* function = "validate")
   {
       if(! is_valid_for_arithmetic<TIMEISH>(t))
       {
           std::stringstream message("dds::core::InvalidDataError");
           message << "Value invalid for arithmetic operations" << context << function
                   << " seconds=" << t.sec() << " (" << std::hex << t.sec()
                   << ") nanoseconds=" << t.nanosec() << " (" << std::hex << t.nanosec() << ")";
           ISOCPP_THROW_EXCEPTION(ISOCPP_ILLEGAL_OPERATION_ERROR, message.str().c_str());
       }
   }
   
   }
   }
   }
   }
   }
   
   #endif /* CYCLONEDDS_CORE_TIME_HELPER_HPP_ */
